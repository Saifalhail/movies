name: Daily Movie Scraping

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual trigger

jobs:
  scrape:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install Chrome
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run scraping
      run: |
        python scrape_movies.py
      continue-on-error: true  # Continue even if scraping fails
    
    - name: Check scraping results
      id: check_results
      run: |
        if [ -f "data/movies.json" ] && [ -f "data/metadata.json" ]; then
          echo "Scraping completed successfully"
          echo "::set-output name=scrape_success::true"
        else
          echo "Scraping failed or produced incomplete data"
          echo "::set-output name=scrape_success::false"
        fi
    
    - name: Upload scraping logs
      if: always()  # Upload logs whether scraping succeeded or failed
      uses: actions/upload-artifact@v2
      with:
        name: scraping-logs
        path: scraping.log
        retention-days: 7
    
    - name: Commit and push if changes
      if: steps.check_results.outputs.scrape_success == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes to commit
        if [[ -n "$(git status --porcelain)" ]]; then
          git add data/
          git commit -m "Update movie data [skip ci]" -a
          git push
        else
          echo "No changes to commit"
        fi
    
    - name: Create backup
      if: steps.check_results.outputs.scrape_success == 'true'
      run: |
        timestamp=$(date +%Y%m%d_%H%M%S)
        mkdir -p data/backups
        cp data/movies.json "data/backups/movies_${timestamp}.json"
        cp data/metadata.json "data/backups/metadata_${timestamp}.json"
    
    - name: Upload backup as artifact
      if: steps.check_results.outputs.scrape_success == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: movie-data-backup
        path: data/backups/
        retention-days: 7 